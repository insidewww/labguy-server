import crypto from "crypto";
import { env } from "process";
import { prisma } from "../src/prismaclient";
import { ImageController } from "../src/controllers/ImageController";
import path from "path";
import fs from "fs";
import { Prisma } from "@prisma/client";
import { generateSlug } from "../src/utils/generateSlug";
import { SavedFile } from "../src/middleware/uploadImages";
import { Readable } from "stream";

export const styles = {
  reset: "\x1b[0m",
  bold: "\x1b[1m",
  underline: "\x1b[4m",
  red: "\x1b[31m",
  green: "\x1b[32m",
  yellow: "\x1b[33m",
  blue: "\x1b[34m",
  magenta: "\x1b[35m",
  cyan: "\x1b[36m",
  white: "\x1b[37m",
  grey: "\x1b[90m",
};

async function createAdmin(email: string): Promise<void> {
  const password = "admin";
  const salt = crypto.randomBytes(32).toString("hex");
  const hash = crypto
    .pbkdf2Sync(password, salt, 10000, 64, "sha512")
    .toString("hex");

  let user = await prisma.user.findFirst();

  if (user) {
    return console.log(
      `${styles.grey}Admin ${user.id} already exists. Skipping seed.${styles.reset}`
    );
  }

  user = await prisma.user.create({
    data: { email, salt, hash },
  });

  console.log(
    `${styles.grey}Admin ${user.id} created with: ${styles.blue}Email: "${user.email}", Password: "${password}".${styles.reset}`
  );
}

async function createPreferences(): Promise<void> {
  const preferences = await prisma.preferences.findFirst();

  if (preferences) {
    return console.log(
      `${styles.grey}Preferences already exist. Skipping seed.${styles.reset}`
    );
  }

  const imageController = new ImageController();
  const imagePath = path.resolve(
    __dirname,
    "assets/great-mountains_jakubkanna.jpg"
  );

  if (!fs.existsSync(imagePath)) {
    throw new Error(`Image file not found at ${imagePath}`);
  }

  // Read the file into a buffer
  const fileBuffer = fs.readFileSync(imagePath);

  const file: SavedFile = {
    originalname: "great-mountains_jakubkanna.jpg",
    path: imagePath,
    mimetype: "image/jpeg",
    isBright: false,
    filename: "great-mountains_jakubkanna.jpg",
    fieldname: "",
    encoding: "7bit",
    size: fileBuffer.length,
    stream: Readable.from(fileBuffer),
    destination: "",
    buffer: fileBuffer,
  };

  const uploadedImage = await imageController.uploadImageFile(file);

  const urls = [
    { url: "#1", title: "Link" },
    { url: "#2", title: "Another" },
  ];

  await prisma.preferences.create({
    data: {
      artists_name: "Artist's Name",
      homepage_media: uploadedImage,
      homepage_heading: "Homepage",
      homepage_subheading: "Sub-Heading",
      homepage_urls: urls,
      enable_dashboard_darkmode: true,
      enable_portfolio_pdf: true,
    },
  });

  console.log(`${styles.grey}Preferences created.${styles.reset}`);
}

async function createProfile(): Promise<void> {
  const userId = 1;

  // Check if the profile already exists
  const existingProfile = await prisma.profile.findUnique({
    where: { userId },
  });

  if (existingProfile) {
    console.log(
      `${styles.grey}Profile for user ${userId} already exists. Skipping seed.${styles.reset}`
    );
    return;
  }

  // Create profile first
  const profile = await prisma.profile.create({
    data: {
      statement: `<p>Perched in the great mountains, my art is a blend of mad science and Mother Nature's finest. By day, I chase the elusive mountain light; by night, I wonder if I should have been a meteorologist. My work is inspired by the peaks, valleys, and the occasional goat that wanders into my studio. Using a mix of natural elements and a bit of techy wizardry, I create pieces that make you feel like you've just hiked a thousand feet‚Äîwithout breaking a sweat. And yes, this statement was generated by GPT, but the goats are 100% real.</p>`,
      additional: [
        {
          html: `<h3>Selected Exhibitions</h3>
          <ul>
            <li>2023: "Peaks & Pixels" - Mountain View Art Gallery</li>
            <li>2022: "Nature's Code" - Alpine Heights Museum</li>
            <li>2021: "Beyond the Summit" - Wildlands Art Festival</li>
            <li>2020: "Elements of the Earth" - Ridgeway Contemporary</li>
          </ul>`,
        },
        {
          html: `<h3>Education</h3>
          <ul>
            <li>MFA in Fine Arts, Summit School of Visual Arts, 2018</li>
            <li>BFA in Digital Media, Valleyview University, 2015</li>
            <li>Certificate in Environmental Art, Green Peaks Academy, 2013</li>
          </ul>`,
        },
        {
          html: `<h3>Awards & Honors</h3>
          <ul>
            <li>2023: Mountain Arts Fellowship</li>
            <li>2022: Nature-Inspired Innovator Award</li>
            <li>2021: Artist-in-Residence, Alpine Heights</li>
          </ul>`,
        },
        {
          html: `<h3>Publications</h3>
          <ul>
            <li>"The Art of Nature: A Journey Through Mountain Landscapes" - ArtReview Magazine, 2023</li>
            <li>"Beyond the Canvas: Integrating Technology with Nature" - Digital Artist Quarterly, 2022</li>
            <li>"Crafting with Nature: An Artist's Perspective" - Creative Spaces Journal, 2021</li>
          </ul>`,
        },
      ],
      userId: userId,
    },
  });

  // Create contact and social media
  const contact = await prisma.contact.create({
    data: {
      name: "Labguy",
      email: "example@example.com",
      socialmedia: {
        create: [
          {
            platform: "Twitter",
            profileUrl: "https://twitter.com/example",
            username: "example",
          },
          {
            platform: "LinkedIn",
            profileUrl: "https://linkedin.com/in/example",
            username: "example",
          },
        ],
      },
      profileId: profile.userId,
    },
  });

  // Update profile to link it to the contact
  await prisma.profile.update({
    where: { userId: profile.userId },
    data: {
      contact: {
        connect: { id: contact.id },
      },
    },
  });

  console.log(
    `${styles.grey}Profile for user ${userId} created.${styles.reset}`
  );
}

async function createProject(): Promise<number | void> {
  let project = await prisma.project.findFirst();

  if (project) {
    return console.log(
      `${styles.grey}Project already exists. Skipping seed.${styles.reset}`
    );
  }
  const tile = "First project";

  const data: Prisma.ProjectCreateInput = {
    subtitle: "First Project Subtitle",
    start_date: new Date("2024-01-01"),
    text: "<p>This is the first project description.</p>",
    venue: "Art Gallery, City Name",
    general: {
      create: {
        title: tile,
        description: "Description of a new project.",
        slug: await generateSlug(tile, prisma.project),
        published: true,
      },
    },
  };

  // If no project exists, create the first project
  project = await prisma.project.create({
    data: data,
  });

  console.log(
    `${styles.grey}First project created successfully with ID: ${project.id}.${styles.reset}`
  );

  return project.id;
}

async function createWork(projectId: number): Promise<void> {
  let work = await prisma.work.findFirst();

  if (work) {
    return console.log(
      `${styles.grey}Work already exists. Skipping seed.${styles.reset}`
    );
  }

  const title = "First Work";
  const medium = "Oil on Canvas";
  const dimensions = "24x36";
  const year = 2024;

  const video: Prisma.VideoRefCreateWithoutTagsInput = {
    etag: "SEFX1oqb8UAnI8g7Z9ov22gJ6fc",
    mediaType: "VIDEO",
    id: "z70z6BS4CfE",
    vimeo_url: null,
    sc_url: null,
    yt_url: "https://www.youtube.com/watch?v=z70z6BS4CfE",
    title:
      "Jungle Atmospherics - Late 90s Ambient / Atmospheric / Intelligent Jungle Mix",
    duration: "PT1H13M59S",
    definition: "hd",
    description:
      "Made a big mix of some of my favourite lush, deep and atmospheric jungle / drum and bass trax from the late 90s, a spacey musical journey progressing from jazzy and dreamy to hard and fast üíøüéöüéõüéöüíø Striking a perfect balance between smooth synths and intricate breakbeats, it's a truly magical and forward-thinking genre of music that sounds like the future even 25-30 years later.\n\nI‚Äôve also been getting super interested in early 3D from the same era and how it‚Äôs tied to this type of music, so I learnt how to use some old 3D software and made some renders to go along with the mix (You can watch how I made everything here - https://youtu.be/Yt7d-erT4CE?si=pbrKN7ctHdb5TAuH ). Be sure to find somewhere comfortable, put on some good headphones and enjoyüé∂\n\nüíø Mix CD: https://abstractambiences.square.site/product/jungle-atmospherics-mix-cd/30?cs=true&cst=custom&utm_source=IGShopping&utm_medium=Social\n\nNew mix + visuals I just made: https://www.youtube.com/watch?v=H952Ej5v5a4&t=278s \n\nüíå If you wanna stay updated on stuff I make and also get a special 20% off everything on my website you can sign up for my newsletter here: https://abstractambiences.square.site/signup üíå\n\nüñºÔ∏è You can also follow my instagram at https://www.instagram.com/abstract.ambiences/ \n\n(Had to trim the track So Long by Seba and Lotek out of the mix due to a copyright claim :/ Can still listen to the full mix here https://soundcloud.com/user-81193476/atmospheric-90s-jungle-mix )\n\nTracklist: \n00:00 Wax Doctor - All I Need (1996)\n04:59 Axis - One In Ten (1996)\n08:10 The Chameleon - Links (1995)\n12:33 Wax Doctor - Offshore Drift (1996) \n16:56 The Chameleon - Just Close Your Eyes and Listen (1995) \n21:19 Intense - The Genesis Project (Earl Grey Remix) (1994)\n25:14 Voyager - Apollo (1998)\n[Trimmed due to copyright] Seba and Lotek - So Long (1996)\n28:33 PHD - Beneath the Surface (1998)\n32:29 Artemis - Inner Worlds (1998)\n35:06 Total Science - Time Step (1996) \n39:18 Intense - The Sax Lick (1996) \n42:39 Blu Mar Ten - Cumulus (1997) \n47:12 LTJ Bukem - Music (Peshay Rework) (1996)\n51:42 Suzigo - Brilliant Europa (Artemis Remix) (1997)\n55:25 Seba - Camouflage (1998)\n1:00:26 Shogun - Nautilus (Mouly and Lucida Remix) (1996)\n1:02:50 Ken Ishii - Stretch (Shogun Remix) (1996) \n1:04:43 Motiv One - Loop Progression (1997)\n1:08:25 The Future Sound of London - Papa New Guinea (NuTone Remix) (2003)\n\n#atmospheric #ambient #atmosphericdnb #atmosphericjungle #ambientjungle #ambientdnb #intelligentjungle #intelligentdnb #goodlookingrecords #90s #y2k #mix #dj #djset #djmix #studymusic #gamingmusic #chillmusic #bryce3d",
    thumbnail: "https://i.ytimg.com/vi/z70z6BS4CfE/hqdefault.jpg",
    player_loop: true,
    player_muted: false,
  };

  const data: Prisma.WorkCreateInput = {
    medium: medium,
    dimensions: dimensions,
    year: year,
    general: {
      create: {
        title: title,
        description: "Description of a new work.",
        slug: await generateSlug(title, prisma.work),
        published: true,
      },
    },
  };

  work = await prisma.work.create({
    data: data,
  });

  console.log(
    `${styles.grey}First work created successfully with ID: ${work.id}.${styles.reset}`
  );
}

// Create default tag
async function createTag() {
  const exist = await prisma.tag.findUnique({
    where: { title: "default" },
  });

  if (!!exist)
    return console.log(
      `${styles.grey}Work already exists. Skipping seed.${styles.reset}`
    );

  const tag = await prisma.tag.create({
    data: {
      title: "default",
    },
  });

  console.log(
    `${styles.grey}First tag created successfully with ID: ${tag.id}.${styles.reset}`
  );
}

export async function seed(): Promise<void> {
  try {
    if (env.ADMIN_EMAIL) {
      await createAdmin(env.ADMIN_EMAIL);
    } else {
      throw new Error("No admin email provided");
    }

    await createPreferences();
    await createProfile();

    const projectId = await createProject();

    projectId && (await createWork(projectId));

    await createTag();
  } catch (error: any) {
    console.error(`${styles.red}Error: ${error.message}${styles.reset}`);
    process.exit(1);
  }
}

seed();

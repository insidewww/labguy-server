const os = require("os");
const http = require("http");
const app = require("../dist/app").default;

// Function to get the local IP address
function getLocalIP() {
  const interfaces = os.networkInterfaces();
  for (const interfaceKey in interfaces) {
    for (const network of interfaces[interfaceKey]) {
      // Check if it is an IPv4 address and is not a loopback address
      if (network.family === "IPv4" && !network.internal) {
        return network.address; // Return the first external IP found
      }
    }
  }
  return "127.0.0.1"; // Fallback to localhost if no external IP found
}

// Get the port
const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

// Get local IP dynamically
const ipAddress = getLocalIP();

// Create server and bind to the local IP address
const server = http.createServer(app);
server.listen(port, ipAddress);
server.on("error", onError);
server.on("listening", onListening);

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    return val;
  }
  if (port >= 0) {
    return port;
  }
  return false;
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }
  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  console.log(
    `Server is running at http://${addr.address === "::" ? "localhost" : addr.address}:${addr.port}/`
  );
}
